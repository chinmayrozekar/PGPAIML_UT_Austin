Description
superkart.jpg

Business Context
A sales forecast predicts future sales revenue based on historical data, industry trends, and the status of the current sales pipeline. Businesses use the sales forecast to estimate weekly, monthly, quarterly, and annual sales totals. A company needs to make an accurate sales forecast as it adds value across an organization and helps the different verticals to chalk out their future course of action.

Forecasting helps an organization plan its sales operations by region and provides valuable insights to the supply chain team regarding the procurement of goods and materials. An accurate sales forecast process has many benefits, which include improved decision-making about the future and the reduction of sales pipeline and forecast risks. Moreover, it helps to reduce the time spent in planning territory coverage and establishes benchmarks that can be used to assess trends in the future.
Objective
SuperKart is a retail chain operating supermarkets and food marts across various tier cities, offering a wide range of products. To optimize its inventory management and make informed decisions around regional sales strategies, SuperKart wants to accurately forecast the sales revenue of its outlets for the upcoming quarter.

To operationalize these insights at scale, the company has partnered with a data science firm, not just to build a predictive model based on historical sales data but also to develop and deploy a robust forecasting solution that can be integrated into SuperKartâ€™s decision-making systems and used across its network of stores.
Data Dictionary
The data contains the different attributes of the various products and stores.

Product_Id: Unique identifier of each product, each identifier having two letters at the beginning, followed by a number
Product_Weight: Weight of each product
Product_Sugar_Content: Sugar content of each product, like low sugar, regular, and no sugar
Product_Allocated_Area: Ratio of the allocated display area of each product to the total display area of all the products in a store
Product_Type: Broad category for each product like meat, snack foods, hard drinks, dairy, canned, soft drinks, health and hygiene, baking goods, bread, breakfast, frozen foods, fruits and vegetables, household, seafood, starchy foods, others
Product_MRP: Maximum retail price of each product
Store_Id: Unique identifier of each store
Store_Establishment_Year: Year in which the store was established
Store_Size: Size of the store, depending on sq. feet, like high, medium, and low
Store_Location_City_Type: Type of city in which the store is located, like Tier 1, Tier 2, and Tier 3. Tier 1 consists of cities where the standard of living is comparatively higher than that of its Tier 2 and Tier 3 counterparts
Store_Type: Type of store depending on the products that are being sold there, like Departmental Store, Supermarket Type 1, Supermarket Type 2, and Food Mart
Product_Store_Sales_Total: Total revenue generated by the sale of that particular product in that particular store
Submission Guidelines
There are two ways to work on this project:
i. Full-code way: The full-code way is to write the solution code from scratch and only submit a final Python notebook with all the insights and observations.

ii. Low-code way. The low-code way is to use an existing solution notebook template to build the solution and then submit a business presentation with insights and recommendations.

The primary purpose of providing these two options is to allow learners to opt for the approach that aligns with their learning aspirations and outcomes. The table below elaborates on these two options.

Submission type

Who should choose

What is the same across the two

What is different between the two

Final submission file [IMP]

Submission Format

Full-code

Learners who aspire to be in hands-on coding roles in the future, focus on building solution codes from scratch

Perform exploratory data analysis to identify insights and recommendations for the problem 

Focus on code writing: 10 - 20% grading on the quality of the final code submitted

Solution Python notebook from the full-code template submitted in .html format

.html

Low-code

Learners who aspire to be in managerial roles in the future - focus on solution review, interpretation, recommendations, and communicating with the business

Focus on business presentation: 10 - 20% grading on the quality of the final business presentation submitted

Business presentation in .pdf format with problem definition, insights, and recommendations

.pdf

Please follow the steps below to complete the assessment.Kindly note that if you submit a presentation, ONLY the presentation will be evaluated. Please make sure that all the sections mentioned in the rubric have been covered in your submission.

i. Full-code version

Download the full code version of the learner notebook.
Follow the instructions provided in the notebook to complete the project.
Add the link to the Hugging Face Spaces for the frontend and backend of the deployed model in your notebook. Please ensure that the spaces are public.
Write down insights and recommendations for the business problems in the comments.
Submit only thesolution notebook prepared from the learner notebook [format: .html]
ii. Low-code version

Download the low-code version of the learner notebook.
Follow the instructions provided in the notebook to complete the project.
Prepare a business presentation with insights and recommendations for the business problem.
Add the link to the Hugging Face Spaces for the frontend and backend of the deployed model in your presentation. Please ensure that the spaces are public.
Submit only thepresentation [format: .pdf]
2. Any assignment found copied/plagiarized from other submissions will not be graded and will receive zero marks.

3. Please ensure timely submission, as any submission post-deadline will not be accepted for evaluation.

4. Submission will not be evaluated if

it is submitted post-deadline, or
if more than 1 file is submitted.
Best Practices for Full-Code Submissions
The final Python notebook should be well-documented, with inline comments explaining the functionality of the code and markdown cells containing comments on the observations and insights.
The notebook should be run from start to finish sequentially before submission.
It is important to remove all warnings and errors before submission.
The notebook should be submitted as an HTML file (.html) and NOT as a notebook file (.ipynb).
Please refer to the FAQ page for common project-related queries.
Best Practices for Low-Code Submissions
The presentation should be made keeping in mind that the audience will be the Data Science lead of a company.
The key points in the presentation should be the following:
Business Overview of the problem and solution approach
Key findings and insights that can drive business decisions
Business recommendations
Focus on explaining the key takeaways in an easy-to-understand manner.
The inclusion of the potential benefits of implementing the solution will give you the edge.
Copying and pasting from the notebook is not a good idea, and it is better to avoid showing code unless they are the focal point of your presentation.
The presentation should be submitted as a PDF file (.pdf) and NOT as a .pptx file.
Please refer to the FAQ page for common project-related queries.
Power Ahead!
Rubric
Criteria
Data Overview and Exploratory Data Analysis
- Observations on the shape of data, data types of various attributes, missing values, duplicate values and statistical summary.
- Univariate Analysis (boxplots, distribution plots for important variables)
- Bivariate Analysis
- Insights based on EDA
Points
6
Criteria
Data Preprocessing
- Feature engineering (provide rationale if not needed)
- Outlier detection and treatment (provide rationale if treatment is not needed)
- Prepare the data for analysis (Train and Test sets)
- Define the preprocessing pipeline for encoding categorical features
Points
5
Criteria
Model Building
- Choose the metric of choice with proper rationale
- Build any 2 ML models as a part of a pipeline with the data preprocessing steps
- Comment of the perfomance of the models

* The ML models to be built can be any two out of Decision Tree, Bagging, Random Forest, AdaBoost, Gradient Boosting, and XGBoost
Points
7
Criteria
Model Performance Improvement - Hyperparameter Tuning
- Use hyperparameter tuning to tune the models wrt the metric of choice
- Comment of the perfomance of the tuned models
Points
7
Criteria
Model Performance Comparison, Final Model Selection, and Serialization
- Compare the performances of all models built and choose the best model (with proper rationale)
- Check the performance of the best model on the test set
- Serialize the best model
- Load the serialized model and make predictions on the test set
Points
7
Criteria
Deployment - Backend
- Define the Flask API
- Define the dependencies
- Define the Dockerfile
- Create the Docker space in Hugging Face
- Upload the files to the space
- Share the link of the Hugging Face space
Points
9
Criteria
Deployment - Frontend
- Define the streamlit web application
- Define the dependencies file
- Create the Streamlit space in Hugging Face
- Upload the files to the space
- Share the link of the Hugging Face space
Points
7
Criteria
Actionable Insights and Recommendations
- Write down insights from the analysis conducted
- Provide actionable business recommendations
Points
4
Criteria
Presentation/Notebook - Overall quality
- Structure and flow
- Crispness
- Visual appeal
- Conclusion and Business Recommendations

OR

- Structure and flow
- Well commented code
- Conclusion and Business Recommendations
Points
8